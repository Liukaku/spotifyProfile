import type { NextPage } from "next";
import Head from "next/head";
import Logo from "../imgs/Spotify_Icon_RGB_White.png";
import { useState, useEffect } from "react";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useRouter } from "next/router";

interface TheState {
  errors: boolean;
}

const Home: NextPage = () => {
  const [errors, updateErr] = useState<TheState>({ errors: false });
  const [redirect, updateURL] = useState("");
  useEffect(() => {
    if (document.location.href.includes("localhost")) {
      updateURL("http://localhost:3000/callback");
    } else if (document.location.href.includes("spotify-netlify")) {
      updateURL("https://spotify-netlify.netlify.app/callback");
    } else if (document.location.href.includes("herokuapp")) {
      updateURL("https://spotify-profile-one.herokuapp.com/callback");
    } else if (document.location.href.includes("mattstarkey")) {
      updateURL("https://spotify.mattstarkey.dev/callback");
    } else {
      updateURL("https://spotify-profile-one.vercel.app/callback");
    }
    if (window.location.search === "?error" && !errors.errors) {
      updateErr({ errors: true });
    }
  });

  const router = useRouter();

  const client: string = process.env.CLIENT_ID;
  const secret: string = process.env.CLIENT_SECRET;
  const scope: string =
    "user-top-read user-read-recently-played user-follow-read";

  const generateRandomString = (length: number) => {
    let text: string = "";
    const possible: string =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (let i: number = 0; i < length; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
  };

  const query = `response_type=code&client_id=${client}&scope=${scope}&redirect_uri=${redirect}&state=${generateRandomString(
    16
  )}`;

  const completeURL: string =
    `https://accounts.spotify.com/en/authorize?${JSON.stringify(
      query
    )}`.replace('"', "");

  const errorHandle = () => {
    if (errors.errors) {
      return (
        <h1 className="text-red-500 text-center">
          This API account is currently in development mode, only authorised
          accounts are enabled.
        </h1>
      );
    }
  };
  return (
    <div className="">
      <Head>
        <title>Music Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto w-4/5 md:mt-64 mt-52">
        <img
          src={Logo.src}
          alt="Spotify Logo in White"
          className="h-28 mx-auto"
        />
        <h1 className="text-white text-3xl text-center mt-10 font-bold mx-auto spotifyBold">
          Music Profile
        </h1>
        <a
          className="signInBtn mx-auto mt-12 mb-10 text-md px-6 h-10 w-56 pl-10 pt-2 block text-white spotifyBold font-semibold bgSpotifyGreen rounded-full"
          href={completeURL}
        >
          Log in to Spotify
        </a>
        {errorHandle()}
      </div>
    </div>
  );
};

export default Home;
